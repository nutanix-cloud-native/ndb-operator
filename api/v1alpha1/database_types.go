/*
Copyright 2022-2023 Nutanix, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/*
GENERATED by operator-sdk
Changes added
*/

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// DatabaseSpec defines the desired state of Database
type DatabaseSpec struct {
	// +kubebuilder:validation:Required
	NDBRef string `json:"ndbRef"`
	// +optional
	IsClone bool `json:"isClone"`
	// +optional
	Instance *Instance `json:"databaseInstance"`
	// +optional
	Clone *Clone `json:"clone"`
}

// DatabaseStatus defines the observed state of Database
type DatabaseStatus struct {
	IPAddress                 string `json:"ipAddress"`
	Id                        string `json:"id"`
	Status                    string `json:"status"`
	DatabaseServerId          string `json:"dbServerId"`
	Type                      string `json:"type"`
	CreationOperationId       string `json:"creationOperationId"`
	DeregistrationOperationId string `json:"deregistrationOperationId"`
}

// Database is the Schema for the databases API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:shortName={"db","dbs"}
// +kubebuilder:printcolumn:name="IP Address",type=string,JSONPath=`.status.ipAddress`
// +kubebuilder:printcolumn:name="Status",type=string,JSONPath=`.status.status`
// +kubebuilder:printcolumn:name="Type",type=string,JSONPath=`.status.type`
type Database struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   DatabaseSpec   `json:"spec,omitempty"`
	Status DatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
// DatabaseList contains a list of Database
type DatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Database `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Database{}, &DatabaseList{})
}

// These are required to have a deep copy, object interface implementation
// These are the structs for the Spec and Status

// Database instance specific details
type Instance struct {
	// Name of the database instance
	Name string `json:"name"`
	// +optional
	// Description of the database instance
	Description string `json:"description"`
	// Id of the cluster to provision the database on
	ClusterId string `json:"clusterId"`
	// +optional
	Profiles *Profiles `json:"profiles"`
	// Name of the secret holding the credentials for the database instance (password and ssh key)
	CredentialSecret string `json:"credentialSecret"`
	// +optional
	// default UTC
	TimeZone string `json:"timezone"`
	// +optional
	// Name(s) of the database(s) to be provisiond inside the database instance
	// default [ "database_one", "database_two", "database_three" ]
	DatabaseNames []string `json:"databaseNames"`
	// Size of the database instance, minimum 10 (GBs)
	Size int    `json:"size"`
	Type string `json:"type"`
	// +optional
	// Information related to time machine that is to be associated with this database
	TMInfo *DBTimeMachineInfo `json:"timeMachine"`
	// +optional
	// Additional database engine specific arguments
	AdditionalArguments map[string]string `json:"additionalArguments"`
	// +optional
	IsHighAvailability bool `json:"isHighAvailability"`
	// +optional
	Nodes []*Node `json:"nodes,omitempty"`
}

type Node struct {
	// +optional
	VmName     string         `json:"vmName"`
	Properties NodeProperties `json:"properties"`
}

type NodeProperties struct {
	NodeType string `json:"node_type"`
	// +optional
	Role string `json:"role"`
	// +optional
	FailoverMode string `json:"failover_mode"`
}

type Clone struct {
	// Name of the clone instance
	Name string `json:"name"`
	// Description of the clone instance
	// +optional
	Description string `json:"description"`
	// Type of parent clone
	Type string `json:"type"`
	// Id of the cluster to clone the database on
	ClusterId string `json:"clusterId"`
	// +optional
	Profiles *Profiles `json:"profiles"`
	// Name of the secret holding the credentials for the database instance (password and ssh key)
	CredentialSecret string `json:"credentialSecret"`
	// +optional
	// default UTC
	TimeZone string `json:"timezone"`
	// Id of the source database on NDB to clone from
	SourceDatabaseId string `json:"sourceDatabaseId"`
	// Id of the snapshot to create a clone from
	SnapshotId string `json:"snapshotId"`
	// +optional
	// Additional database engine specific arguments
	AdditionalArguments map[string]string `json:"additionalArguments"`
}

// Time Machine details
type DBTimeMachineInfo struct {
	// +optional
	Name string `json:"name"`
	// +optional
	Description string `json:"description"`
	// +optional
	// Name of the SLA to be used, default NONE
	SLAName string `json:"sla"`
	// +optional
	// Daily snapshot time in HH:MM:SS (24 hour format)
	DailySnapshotTime string `json:"dailySnapshotTime"`
	// +optional
	// Number of snapshots per day
	SnapshotsPerDay int `json:"snapshotsPerDay"`
	// +optional
	// Log catch up frequency in minutes
	LogCatchUpFrequency int `json:"logCatchUpFrequency"`
	// +optional
	// Day of the week for weekly snapshot
	WeeklySnapshotDay string `json:"weeklySnapshotDay"`
	// +optional
	// Day of the month for monthly snapshot
	MonthlySnapshotDay int `json:"monthlySnapshotDay"`
	// +optional
	// Start month for the quarterly snapshot
	// Jan => Jan, Apr, Jul, Oct.
	// Feb => Feb, May, Aug, Nov.
	// Mar => Mar, Jun, Sep, Dec.
	QuarterlySnapshotMonth string `json:"quarterlySnapshotMonth"`
}

type Profiles struct {
	// +optional
	Software Profile `json:"software"`
	// +optional
	Compute Profile `json:"compute"`
	// +optional
	Network Profile `json:"network"`
	// +optional
	DbParam Profile `json:"dbParam"`
	// +optional
	DbParamInstance Profile `json:"dbParamInstance"`
}

type Profile struct {
	// +optional
	Id string `json:"id"`
	// +optional
	Name string `json:"name"`
}
